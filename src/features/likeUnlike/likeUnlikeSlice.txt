/* eslint-disable react-hooks/rules-of-hooks */
/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { updateLikeUnlike } from './likeUnlikeAPI';

const initialState = {
  video: {},
  isLoading: false,
  isError: false,
  error: '',
};

// async thunk
export const likeUnlikeUpdate = createAsyncThunk(
  'likeUnlike/likeUnlikeUpdate',
  async ({ id, value }) => {
    // console.log(id);
    // console.log(value);
    const likeUnlikeData = await updateLikeUnlike(id, value);
    return likeUnlikeData;
    // console.log(likeUnlikeData);
  }
);

// console.log(video);
const likeUnlikeSlice = createSlice({
  name: 'likeUnlike',
  initialState,
  reducers: {
    getVIdeoLikeUnlike: (state, action) => {
      state.video = action.payload;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(likeUnlikeUpdate.pending, (state) => {
        state.isError = false;
        state.isLoading = true;
      })
      .addCase(likeUnlikeUpdate.fulfilled, (state, action) => {
        console.log(action.payload.likes);
        state.isLoading = false;
        state.video.likes = action.payload.likes;
      })
      .addCase(likeUnlikeUpdate.rejected, (state, action) => {
        state.isLoading = false;
        state.videos = {};
        state.isError = true;
        state.error = action.error?.message;
      });
  },
});

export const { getVIdeoLikeUnlike } = likeUnlikeSlice.actions;
export default likeUnlikeSlice;
